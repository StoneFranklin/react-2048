{"ast":null,"code":"var _jsxFileName = \"/Users/stonefranklin/code/web/2048/client/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const [positions, setPositions] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const [row0, setRow0] = useState([0, 0, 0, 0]);\n  const [row1, setRow1] = useState([0, 0, 0, 0]);\n  const [row2, setRow2] = useState([0, 0, 0, 0]);\n  const [row3, setRow3] = useState([0, 0, 0, 0]);\n  let emptyMatrix = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  let empyRow = [0, 0, 0, 0];\n\n  function randomPosition() {\n    const row = Math.floor(Math.random() * 4);\n    const col = Math.floor(Math.random() * 4);\n\n    if (positions[row][col] === 0) {\n      return [row, col];\n    }\n\n    return randomPosition();\n  }\n\n  function startSquares() {// let temp = emptyMatrix;\n    // const pos1 = randomPosition();\n    // let pos2;\n    // do {\n    //     pos2 = randomPosition();\n    // } while(pos1[0] === pos2[0] && pos1[1] === pos2[1])\n    // temp[pos1[0]][pos1[1]] = 2;\n    // temp[pos2[0]][pos2[1]] = 2;\n    // setPositions(temp);\n  }\n\n  function setRow(row, col, val) {\n    let tempRow;\n\n    switch (row) {\n      case 0:\n        tempRow = row0;\n        tempRow[col] = val;\n        setRow0(tempRow);\n        break;\n\n      case 1:\n        tempRow = row1;\n        tempRow[col] = val;\n        setRow1(tempRow);\n        break;\n\n      case 2:\n        tempRow = row2;\n        tempRow[col] = val;\n        setRow2(tempRow);\n        break;\n\n      case 3:\n        tempRow = row3;\n        tempRow[col] = val;\n        setRow3(tempRow);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function makeCopyofBoard() {\n    let output = emptyMatrix;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        output[i][j] = positions[i][j];\n      }\n    }\n\n    return output;\n  }\n\n  function slideAllRight() {\n    let output = emptyMatrix;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 2; j >= 0; j--) {\n        output = slideRight(i, j);\n      }\n    }\n\n    setPositions(prevState => {\n      return { ...prevState,\n        ...output\n      };\n    });\n  }\n\n  function slideRight(row, col) {\n    //let temp = makeCopyofBoard();\n    let temp = positions;\n    let tempCol = col + 1;\n\n    while (temp[row][tempCol] === 0 && tempCol < 4) {\n      temp[row][tempCol] = positions[row][tempCol - 1];\n      temp[row][tempCol - 1] = 0;\n      tempCol++;\n    }\n\n    return temp; // setPositions(temp);\n    // console.log(temp);\n    // console.log(\"temp1: \" + temp1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"play-button\",\n      variant: \"contained\",\n      onClick: () => startSquares(),\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"right-button\",\n      variant: \"contained\",\n      onClick: () => slideAllRight(),\n      children: \"Slide Right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: [row0.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)), row1.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)), row2.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this)), row3.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"wULnNiXNDqZyepBOESSLtt4RoRM=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/stonefranklin/code/web/2048/client/src/components/Board.js"],"names":["React","useState","Square","Grid","Container","Button","Board","positions","setPositions","row0","setRow0","row1","setRow1","row2","setRow2","row3","setRow3","emptyMatrix","empyRow","randomPosition","row","Math","floor","random","col","startSquares","setRow","val","tempRow","makeCopyofBoard","output","i","j","slideAllRight","slideRight","prevState","temp","tempCol","map","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\n\nfunction Board() {\n    const [positions, setPositions] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const [row0, setRow0] = useState([0, 0, 0, 0])\n    const [row1, setRow1] = useState([0, 0, 0, 0])\n    const [row2, setRow2] = useState([0, 0, 0, 0])\n    const [row3, setRow3] = useState([0, 0, 0, 0])\n\n    let emptyMatrix = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ];\n\n    let empyRow = [0, 0, 0, 0];\n\n    function randomPosition() {\n        const row = Math.floor(Math.random() * 4);\n        const col = Math.floor(Math.random() * 4);\n\n        if(positions[row][col] === 0) {\n            return [row, col]\n        }\n        \n        return randomPosition();\n    }\n\n    function startSquares() {\n        // let temp = emptyMatrix;\n        \n        // const pos1 = randomPosition();\n        // let pos2;\n\n        // do {\n        //     pos2 = randomPosition();\n        // } while(pos1[0] === pos2[0] && pos1[1] === pos2[1])\n\n        // temp[pos1[0]][pos1[1]] = 2;\n        // temp[pos2[0]][pos2[1]] = 2;\n\n        // setPositions(temp);\n        \n    }\n\n    function setRow(row, col, val) {\n        let tempRow;\n        switch (row) {\n            case 0:\n                tempRow = row0;\n                tempRow[col] = val;\n                setRow0(tempRow)\n                break;\n            case 1:\n                tempRow = row1;\n                tempRow[col] = val;\n                setRow1(tempRow)\n                break;\n            case 2:\n                tempRow = row2;\n                tempRow[col] = val;\n                setRow2(tempRow)\n                break;\n            case 3:\n                tempRow = row3;\n                tempRow[col] = val;\n                setRow3(tempRow)\n                break;\n            default:\n                break;\n        }\n    }\n\n    function makeCopyofBoard() {\n        let output = emptyMatrix;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                output[i][j] = positions[i][j];\n            }\n        }\n        return output;\n    }\n\n    function slideAllRight() {\n        let output = emptyMatrix;\n        for(let i = 0; i < 4; i++) {\n            for(let j = 2; j >= 0; j--) {\n                output = slideRight(i, j);\n            }\n        } \n        setPositions((prevState) => {\n            return {...prevState, ...output};\n        });\n    }\n\n    function slideRight(row, col) {\n        //let temp = makeCopyofBoard();\n        let temp = positions\n        let tempCol = col + 1;\n        while(temp[row][tempCol] === 0 && tempCol < 4) {\n            temp[row][tempCol] = positions[row][tempCol - 1];\n            temp[row][tempCol - 1] = 0;\n            tempCol++;\n        }\n        return temp;\n        // setPositions(temp);\n        // console.log(temp);\n        // console.log(\"temp1: \" + temp1);\n    }\n \n    return (\n        <Container maxWidth=\"xs\">\n            <Button className=\"play-button\" variant=\"contained\" onClick={() => startSquares()}>Play</Button>\n            <Button className=\"right-button\" variant=\"contained\" onClick={() => slideAllRight()}>Slide Right</Button>\n            <div className=\"board\">\n                <Grid \n                    container\n                    spacing={1}\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    \n                >\n                    {/* {positions.map(row => \n                        row.map(value => \n                            <Grid container item xs={3} spacing={0} >\n                                <Square value={value} />\n                            </Grid>\n                        )\n                    )} */}\n                    {row0.map(value => \n                        <Grid container item xs={3} spacing={0} >\n                            <Square value={value} />\n                        </Grid>\n                    )}\n                    {row1.map(value => \n                        <Grid container item xs={3} spacing={0} >\n                            <Square value={value} />\n                        </Grid>\n                    )}\n                    {row2.map(value => \n                        <Grid container item xs={3} spacing={0} >\n                            <Square value={value} />\n                        </Grid>\n                    )}\n                    {row3.map(value => \n                        <Grid container item xs={3} spacing={0} >\n                            <Square value={value} />\n                        </Grid>\n                    )}\n                </Grid>\n            </div>\n        </Container>\n    )\n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}