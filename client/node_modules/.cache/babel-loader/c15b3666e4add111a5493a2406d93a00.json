{"ast":null,"code":"var _jsxFileName = \"/Users/stonefranklin/code/web/2048/client/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const [board, setBoard] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const [hasCombined, setHasCombined] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const emptyMatrix = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  function checkForGameOver() {\n    let isFull = true;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) {\n          isFull = false;\n        }\n      }\n    }\n\n    if (isFull) {\n      setPositions(emptyMatrix);\n    }\n  }\n\n  function randomPosition() {\n    const row = Math.floor(Math.random() * 4);\n    const col = Math.floor(Math.random() * 4);\n\n    if (board[row][col] === 0) {\n      return [row, col];\n    }\n\n    return randomPosition();\n  }\n\n  function startSquares() {\n    let matrix = emptyMatrix;\n    const pos1 = randomPosition();\n    let pos2;\n\n    do {\n      pos2 = randomPosition();\n    } while (pos1[0] === pos2[0] && pos1[1] === pos2[1]);\n\n    matrix[pos1[0]][pos1[1]] = 2;\n    matrix[pos2[0]][pos2[1]] = 2;\n    setPositions(matrix);\n  }\n\n  function randomSquare() {\n    let copy = [...positions];\n    const newSquare = randomPosition();\n    copy[newSquare[0]][newSquare[1]] = 2;\n    setPositions(copy);\n  }\n\n  function slideAllRight() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 2; j >= 0; j--) {\n        slideRight(i, j);\n      }\n    }\n\n    randomSquare();\n    checkForGameOver();\n    setHasCombined(emptyMatrix);\n  }\n\n  function slideRight(row, col) {\n    let copy = [...positions];\n    let combined = [...hasCombined];\n\n    for (let i = col + 1; i < 4; i++) {\n      if (copy[row][i] === 0) {\n        copy[row][i] = positions[row][i - 1];\n        copy[row][i - 1] = 0;\n      } else if (copy[row][i] === copy[row][i - 1] && !combined[row][i - 1]) {\n        copy[row][i] = copy[row][i] * 2;\n        copy[row][i - 1] = 0;\n        combined[row][i] = true;\n      }\n    }\n\n    setPositions(copy);\n    setHasCombined(combined);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"play-button\",\n      variant: \"contained\",\n      onClick: () => startSquares(),\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"right-button\",\n      variant: \"contained\",\n      onClick: () => slideAllRight(),\n      children: \"Slide Right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: positions.map(row => row.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"mCH9BuC0gXB8VpMfc60cRVAIk4c=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/stonefranklin/code/web/2048/client/src/components/Board.js"],"names":["React","useState","Square","Grid","Container","Button","Board","board","setBoard","hasCombined","setHasCombined","emptyMatrix","checkForGameOver","isFull","i","j","setPositions","randomPosition","row","Math","floor","random","col","startSquares","matrix","pos1","pos2","randomSquare","copy","positions","newSquare","slideAllRight","slideRight","combined","map","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\n\nfunction Board() {\n    const [board, setBoard] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const [hasCombined, setHasCombined] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const emptyMatrix = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ];\n\n    function checkForGameOver() {\n        let isFull = true;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if(board[i][j] === 0) {\n                    isFull = false;\n                }\n            }\n        }\n        if (isFull) {\n            setPositions(emptyMatrix);\n        }\n    }\n\n    function randomPosition() {\n        const row = Math.floor(Math.random() * 4);\n        const col = Math.floor(Math.random() * 4);\n\n        if(board[row][col] === 0) {\n            return [row, col]\n        }\n        \n        return randomPosition();\n    }\n\n    function startSquares() {\n        let matrix = emptyMatrix;\n        \n        const pos1 = randomPosition();\n        let pos2;\n\n        do {\n            pos2 = randomPosition();\n        } while(pos1[0] === pos2[0] && pos1[1] === pos2[1])\n\n        matrix[pos1[0]][pos1[1]] = 2;\n        matrix[pos2[0]][pos2[1]] = 2;\n\n        setPositions(matrix);  \n    }\n\n    function randomSquare() {\n        let copy = [...positions];\n        const newSquare = randomPosition();\n\n        copy[newSquare[0]][newSquare[1]] = 2;\n\n        setPositions(copy);\n    }\n\n    function slideAllRight() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 2; j >= 0; j--) {\n                slideRight(i, j);\n            }\n        } \n        randomSquare();\n        checkForGameOver();\n        setHasCombined(emptyMatrix);\n    }\n\n    function slideRight(row, col) {\n        let copy = [...positions]\n        let combined = [...hasCombined]\n\n        for(let i = col + 1; i < 4; i++) {\n            if(copy[row][i] === 0) {\n                copy[row][i] = positions[row][i - 1];\n                copy[row][i - 1] = 0;\n            }\n            else if(copy[row][i] === copy[row][i - 1] && !combined[row][i - 1]) {\n                copy[row][i] = copy[row][i] * 2;\n                copy[row][i - 1] = 0;\n                combined[row][i] = true;\n            }\n        }\n        \n        setPositions(copy);\n        setHasCombined(combined);\n    }\n \n    return (\n        <Container maxWidth=\"xs\">\n            <Button className=\"play-button\" variant=\"contained\" onClick={() => startSquares()}>Play</Button>\n            <Button className=\"right-button\" variant=\"contained\" onClick={() => slideAllRight()}>Slide Right</Button>\n            <div className=\"board\">\n                <Grid \n                    container\n                    spacing={1}\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    \n                >\n                    {positions.map(row => \n                        row.map(value => \n                            <Grid container item xs={3} spacing={0} >\n                                <Square value={value} />\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n            </div>\n        </Container>\n    )\n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}