{"ast":null,"code":"var _jsxFileName = \"/Users/stonefranklin/code/web/2048/client/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const [board, setBoard] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const [hasCombined, setHasCombined] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const emptyMatrix = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  function checkForGameOver() {\n    let isFull = true;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) {\n          isFull = false;\n        }\n      }\n    }\n\n    if (isFull) {\n      setBoard(emptyMatrix);\n    }\n  }\n\n  function randomPosition() {\n    const row = Math.floor(Math.random() * 4);\n    const col = Math.floor(Math.random() * 4);\n\n    if (board[row][col] === 0) {\n      return [row, col];\n    }\n\n    return randomPosition();\n  }\n\n  function startSquares() {\n    let matrix = emptyMatrix;\n    const pos1 = randomPosition();\n    let pos2;\n\n    do {\n      pos2 = randomPosition();\n    } while (pos1[0] === pos2[0] && pos1[1] === pos2[1]);\n\n    matrix[pos1[0]][pos1[1]] = 2;\n    matrix[pos2[0]][pos2[1]] = 2;\n    setBoard(matrix);\n  }\n\n  function randomSquare() {\n    let copy = [...board];\n    const newSquare = randomPosition();\n    copy[newSquare[0]][newSquare[1]] = 2;\n    setBoard(copy);\n  }\n\n  function slideAllRight() {\n    const start = [...board];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 2; j >= 0; j--) {\n        slideRight(i, j);\n      }\n    }\n\n    if (start !== board) {\n      randomSquare();\n    }\n\n    checkForGameOver();\n    setHasCombined(emptyMatrix);\n  }\n\n  function slideRight(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = col + 1; i < 4; i++) {\n      if (boardCopy[row][i] === 0) {\n        boardCopy[row][i] = board[row][i - 1];\n        boardCopy[row][i - 1] = 0;\n      } else if (boardCopy[row][i] === boardCopy[row][i - 1] && !combinedCopy[row][i - 1]) {\n        boardCopy[row][i] = boardCopy[row][i] * 2;\n        boardCopy[row][i - 1] = 0;\n        combinedCopy[row][i] = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  function slideAllLeft() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 1; j < 4; j++) {\n        slideLeft(i, j);\n      }\n    }\n\n    checkForGameOver();\n    setHasCombined(emptyMatrix);\n  }\n\n  function slideLeft(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = col; i >= 0; i--) {\n      if (boardCopy[row][i - 1] === 0) {\n        boardCopy[row][i - 1] = board[row][i];\n        boardCopy[row][i] = 0;\n      } else if (boardCopy[row][i - 1] === boardCopy[row][i] && !combinedCopy[row][i]) {\n        boardCopy[row][i - 1] = boardCopy[row][i] * 2;\n        boardCopy[row][i] = 0;\n        combinedCopy[row][i - 1] = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  function slideAllUp() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 1; j < 4; j++) {\n        slideUp(j, i);\n      }\n    }\n\n    checkForGameOver();\n    setHasCombined(emptyMatrix);\n  }\n\n  function slideUp(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = row; i > 0; i--) {\n      if (boardCopy[i - 1][col] === 0) {\n        boardCopy[i - 1][col] = board[i][col];\n        boardCopy[i][col] = 0;\n      } else if (boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i][col]) {\n        boardCopy[i - 1][col] = boardCopy[i][col] * 2;\n        boardCopy[i][col] = 0;\n        combinedCopy[i - 1][col] = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  function slideAllDown() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 2; j >= 0; j--) {\n        slideDown(j, i);\n      }\n    }\n\n    checkForGameOver();\n    setHasCombined(emptyMatrix);\n  }\n\n  function slideDown(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = row + 1; i < 4; i++) {\n      if (boardCopy[i][col] === 0) {\n        boardCopy[i][col] = board[i - 1][col];\n        boardCopy[i - 1][col] = 0;\n      } else if (boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i - 1][col]) {\n        boardCopy[i][col] = boardCopy[i][col] * 2;\n        boardCopy[i - 1][col] = 0;\n        combinedCopy[i][col] = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"play-button\",\n      variant: \"contained\",\n      onClick: () => startSquares(),\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"right-button\",\n      variant: \"contained\",\n      onClick: () => slideAllRight(),\n      children: \"Slide Right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"left-button\",\n      variant: \"contained\",\n      onClick: () => slideAllLeft(),\n      children: \"Slide Left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"up-button\",\n      variant: \"contained\",\n      onClick: () => slideAllUp(),\n      children: \"Slide Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"down-button\",\n      variant: \"contained\",\n      onClick: () => slideAllDown(),\n      children: \"Slide Down\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: board.map(row => row.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"mCH9BuC0gXB8VpMfc60cRVAIk4c=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/stonefranklin/code/web/2048/client/src/components/Board.js"],"names":["React","useState","Square","Grid","Container","Button","Board","board","setBoard","hasCombined","setHasCombined","emptyMatrix","checkForGameOver","isFull","i","j","randomPosition","row","Math","floor","random","col","startSquares","matrix","pos1","pos2","randomSquare","copy","newSquare","slideAllRight","start","slideRight","boardCopy","combinedCopy","slideAllLeft","slideLeft","slideAllUp","slideUp","slideAllDown","slideDown","map","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\n\nfunction Board() {\n    const [board, setBoard] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const [hasCombined, setHasCombined] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const emptyMatrix = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ];\n\n    function checkForGameOver() {\n        let isFull = true;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if(board[i][j] === 0) {\n                    isFull = false;\n                }\n            }\n        }\n        if (isFull) {\n            setBoard(emptyMatrix);\n        }\n    }\n\n    function randomPosition() {\n        const row = Math.floor(Math.random() * 4);\n        const col = Math.floor(Math.random() * 4);\n\n        if(board[row][col] === 0) {\n            return [row, col]\n        }\n        \n        return randomPosition();\n    }\n\n    function startSquares() {\n        let matrix = emptyMatrix;\n        \n        const pos1 = randomPosition();\n        let pos2;\n\n        do {\n            pos2 = randomPosition();\n        } while(pos1[0] === pos2[0] && pos1[1] === pos2[1])\n\n        matrix[pos1[0]][pos1[1]] = 2;\n        matrix[pos2[0]][pos2[1]] = 2;\n\n        setBoard(matrix);  \n    }\n\n    function randomSquare() {\n        let copy = [...board];\n        const newSquare = randomPosition();\n\n        copy[newSquare[0]][newSquare[1]] = 2;\n\n        setBoard(copy);\n    }\n\n    function slideAllRight() {\n        const start = [...board];\n        for (let i = 0; i < 4; i++) {\n            for(let j = 2; j >= 0; j--) {\n                slideRight(i, j);\n            }\n        } \n        \n        if (start !== board) {\n            randomSquare();\n        }\n        \n        checkForGameOver();\n        setHasCombined(emptyMatrix);\n    }\n\n    function slideRight(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n      \n\n        for(let i = col + 1; i < 4; i++) {\n            if(boardCopy[row][i] === 0) {\n                boardCopy[row][i] = board[row][i - 1];\n                boardCopy[row][i - 1] = 0;\n              \n            }\n            else if(boardCopy[row][i] === boardCopy[row][i - 1] && !combinedCopy[row][i - 1]) {\n                boardCopy[row][i] = boardCopy[row][i] * 2;\n                boardCopy[row][i - 1] = 0;\n                combinedCopy[row][i] = true;\n    \n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n       \n    }\n\n    function slideAllLeft() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 1; j < 4; j++) {\n                slideLeft(i, j);\n            }\n        } \n        \n        checkForGameOver();\n        setHasCombined(emptyMatrix);\n        \n    }\n\n    function slideLeft(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n\n        for(let i = col; i >= 0; i--) {\n            if(boardCopy[row][i - 1] === 0) {\n                boardCopy[row][i - 1] = board[row][i];\n                boardCopy[row][i] = 0;\n                \n            }\n            else if(boardCopy[row][i - 1] === boardCopy[row][i] && !combinedCopy[row][i]) {\n                boardCopy[row][i - 1] = boardCopy[row][i] * 2;\n                boardCopy[row][i] = 0;\n                combinedCopy[row][i - 1] = true;\n                \n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n\n    function slideAllUp() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 1; j < 4; j++) {\n                slideUp(j, i);\n            }\n        } \n       \n        checkForGameOver();\n        setHasCombined(emptyMatrix);\n        \n    }\n\n    function slideUp(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n\n        for(let i = row; i > 0; i--) {\n            if(boardCopy[i - 1][col] === 0) {\n                boardCopy[i - 1][col] = board[i][col];\n                boardCopy[i][col] = 0;\n               \n            }\n            else if(boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i][col]) {\n                boardCopy[i - 1][col] = boardCopy[i][col] * 2;\n                boardCopy[i][col] = 0;\n                combinedCopy[i - 1][col] = true;\n                \n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n\n    function slideAllDown() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 2; j >= 0; j--) {\n                slideDown(j, i);\n            }\n        } \n\n        \n        checkForGameOver();\n        setHasCombined(emptyMatrix);\n        \n    }\n\n    function slideDown(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n\n        for(let i = row + 1; i < 4; i++) {\n            if(boardCopy[i][col] === 0) {\n                boardCopy[i][col] = board[i - 1][col];\n                boardCopy[i - 1][col] = 0;\n                \n            }\n            else if(boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i - 1][col]) {\n                boardCopy[i][col] = boardCopy[i][col] * 2;\n                boardCopy[i - 1][col] = 0;\n                combinedCopy[i][col] = true;\n                \n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n \n    return (\n        <Container maxWidth=\"xs\">\n            <Button className=\"play-button\" variant=\"contained\" onClick={() => startSquares()}>Play</Button>\n            <Button className=\"right-button\" variant=\"contained\" onClick={() => slideAllRight()}>Slide Right</Button>\n            <Button className=\"left-button\" variant=\"contained\" onClick={() => slideAllLeft()}>Slide Left</Button>\n            <Button className=\"up-button\" variant=\"contained\" onClick={() => slideAllUp()}>Slide Up</Button>\n            <Button className=\"down-button\" variant=\"contained\" onClick={() => slideAllDown()}>Slide Down</Button>\n            <div className=\"board\">\n                <Grid \n                    container\n                    spacing={1}\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    \n                >\n                    {board.map(row => \n                        row.map(value => \n                            <Grid container item xs={3} spacing={0} >\n                                <Square value={value} />\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n            </div>\n        </Container>\n    )\n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}