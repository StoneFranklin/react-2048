{"ast":null,"code":"var _jsxFileName = \"/Users/stonefranklin/code/web/2048/client/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const [board, setBoard] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const [hasCombined, setHasCombined] = useState([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n  const [score, setScore] = useState(0);\n  let generate = false;\n  const emptyMatrix = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  function getColor(number) {\n    switch (number) {\n      case 2:\n        return \"_2\";\n\n      case 4:\n        return \"_4\";\n\n      case 8:\n        return \"_8\";\n\n      case 16:\n        return \"_16\";\n\n      case 32:\n        return \"_32\";\n\n      case 64:\n        return \"_64\";\n\n      case 128:\n        return \"_128\";\n\n      case 256:\n        return \"_256\";\n\n      case 512:\n        return \"_512\";\n\n      case 1024:\n        return \"_1024\";\n\n      case 2048:\n        return \"_2048\";\n\n      default:\n        return \"_32\";\n    }\n  }\n\n  function checkForMoves(row, col) {\n    // Right\n    if (col < 3 && board[row][col] === board[row][col + 1]) {\n      return true;\n    } // Left\n\n\n    if (col > 0 && board[row][col] === board[row][col - 1]) {\n      return true;\n    } // Up\n\n\n    if (row > 0 && board[row][col] === board[row - 1][col]) {\n      return true;\n    } // Down\n\n\n    if (row < 3 && board[row][col] === board[row + 1][col]) {\n      return true;\n    }\n  }\n\n  function checkForGameOver() {\n    let isFull = true;\n    let isMove = false;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) {\n          isFull = false;\n        }\n\n        isMove = checkForMoves(i, j);\n      }\n    }\n\n    if (isFull && !isMove) {\n      const highScore = score;\n      setBoard(emptyMatrix);\n    }\n  }\n\n  function randomPosition() {\n    const row = Math.floor(Math.random() * 4);\n    const col = Math.floor(Math.random() * 4);\n\n    if (board[row][col] === 0) {\n      return [row, col];\n    }\n\n    return randomPosition();\n  }\n\n  function startSquares() {\n    setScore(0);\n    let matrix = emptyMatrix;\n    const pos1 = randomPosition();\n    let pos2;\n\n    do {\n      pos2 = randomPosition();\n    } while (pos1[0] === pos2[0] && pos1[1] === pos2[1]);\n\n    matrix[pos1[0]][pos1[1]] = 2;\n    matrix[pos2[0]][pos2[1]] = 2;\n    setBoard(matrix);\n  }\n\n  function randomSquare() {\n    let copy = [...board];\n    const newSquare = randomPosition();\n    copy[newSquare[0]][newSquare[1]] = 2;\n    setBoard(copy);\n  }\n\n  function afterSlide() {\n    if (generate) {\n      setTimeout(() => {\n        randomSquare();\n      }, 100);\n    }\n\n    generate = false;\n    checkForGameOver();\n    setHasCombined(emptyMatrix);\n  }\n\n  function slideAllRight() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 2; j >= 0; j--) {\n        if (board[i][j] > 0) {\n          slideRight(i, j);\n        }\n      }\n    }\n\n    afterSlide();\n  }\n\n  function slideRight(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = col + 1; i < 4; i++) {\n      if (boardCopy[row][i] === 0) {\n        boardCopy[row][i] = board[row][i - 1];\n        boardCopy[row][i - 1] = 0;\n        generate = true;\n      } else if (boardCopy[row][i] === boardCopy[row][i - 1] && !combinedCopy[row][i - 1]) {\n        boardCopy[row][i] = boardCopy[row][i] * 2;\n        setScore(score + boardCopy[row][i]);\n        boardCopy[row][i - 1] = 0;\n        combinedCopy[row][i] = true;\n        generate = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  function slideAllLeft() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 1; j < 4; j++) {\n        if (board[i][j] > 0) {\n          slideLeft(i, j);\n        }\n      }\n    }\n\n    afterSlide();\n  }\n\n  function slideLeft(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = col; i >= 0; i--) {\n      if (boardCopy[row][i - 1] === 0) {\n        boardCopy[row][i - 1] = board[row][i];\n        boardCopy[row][i] = 0;\n        generate = true;\n      } else if (boardCopy[row][i - 1] === boardCopy[row][i] && !combinedCopy[row][i]) {\n        boardCopy[row][i - 1] = boardCopy[row][i] * 2;\n        setScore(score + boardCopy[row][i - 1]);\n        boardCopy[row][i] = 0;\n        combinedCopy[row][i - 1] = true;\n        generate = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  function slideAllUp() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 1; j < 4; j++) {\n        if (board[j][i] > 0) {\n          slideUp(j, i);\n        }\n      }\n    }\n\n    afterSlide();\n  }\n\n  function slideUp(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = row; i > 0; i--) {\n      if (boardCopy[i - 1][col] === 0) {\n        boardCopy[i - 1][col] = board[i][col];\n        boardCopy[i][col] = 0;\n        generate = true;\n      } else if (boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i][col]) {\n        boardCopy[i - 1][col] = boardCopy[i][col] * 2;\n        setScore(score + boardCopy[i - 1][col]);\n        boardCopy[i][col] = 0;\n        combinedCopy[i - 1][col] = true;\n        generate = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  function slideAllDown() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 2; j >= 0; j--) {\n        if (board[j][i] > 0) {\n          slideDown(j, i);\n        }\n      }\n    }\n\n    afterSlide();\n  }\n\n  function slideDown(row, col) {\n    let boardCopy = [...board];\n    let combinedCopy = [...hasCombined];\n\n    for (let i = row + 1; i < 4; i++) {\n      if (boardCopy[i][col] === 0) {\n        boardCopy[i][col] = board[i - 1][col];\n        boardCopy[i - 1][col] = 0;\n        generate = true;\n      } else if (boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i - 1][col]) {\n        boardCopy[i][col] = boardCopy[i][col] * 2;\n        setScore(score + boardCopy[i][col]);\n        boardCopy[i - 1][col] = 0;\n        combinedCopy[i][col] = true;\n        generate = true;\n      }\n    }\n\n    setBoard(boardCopy);\n    setHasCombined(combinedCopy);\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', e => {\n      switch (e.key) {\n        case 'ArrowUp':\n          slideAllUp();\n          break;\n\n        case 'ArrowDown':\n          slideAllDown();\n          break;\n\n        case 'ArrowLeft':\n          slideAllLeft();\n          break;\n\n        case 'ArrowRight':\n          slideAllRight();\n          console.log(e.key);\n          break;\n\n        default:\n      }\n    });\n  }, [slideAllUp, slideAllDown, slideAllLeft, slideAllRight]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"play-button\",\n      variant: \"contained\",\n      onClick: () => startSquares(),\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"right-button\",\n      variant: \"contained\",\n      onClick: () => slideAllRight(),\n      children: \"Slide Right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"left-button\",\n      variant: \"contained\",\n      onClick: () => slideAllLeft(),\n      children: \"Slide Left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"up-button\",\n      variant: \"contained\",\n      onClick: () => slideAllUp(),\n      children: \"Slide Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"down-button\",\n      variant: \"contained\",\n      onClick: () => slideAllDown(),\n      children: \"Slide Down\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: \"/submit-score\",\n        state: {\n          score: score\n        }\n      },\n      children: \"TEST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"score\",\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: board.map(row => row.map(value => /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 3,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            value: value,\n            class: `square ${getColor(value)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"vBnP2vm4qo/DSUvulhKhuRFjupY=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/stonefranklin/code/web/2048/client/src/components/Board.js"],"names":["React","useState","Square","Grid","Container","Button","Link","Board","board","setBoard","hasCombined","setHasCombined","score","setScore","generate","emptyMatrix","getColor","number","checkForMoves","row","col","checkForGameOver","isFull","isMove","i","j","highScore","randomPosition","Math","floor","random","startSquares","matrix","pos1","pos2","randomSquare","copy","newSquare","afterSlide","setTimeout","slideAllRight","slideRight","boardCopy","combinedCopy","slideAllLeft","slideLeft","slideAllUp","slideUp","slideAllDown","slideDown","useEffect","window","addEventListener","e","key","console","log","pathname","state","map","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from './Square';\nimport { Grid, Container, Button } from '@material-ui/core';\nimport '../styles.css';\nimport { Link } from 'react-router-dom';\n\nfunction Board() {\n    const [board, setBoard] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const [hasCombined, setHasCombined] = useState(\n        [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    );\n\n    const [score, setScore] = useState(0);\n\n    let generate = false;\n\n    const emptyMatrix = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ];\n\n    function getColor(number) {\n        switch (number) {\n            case 2:\n                return \"_2\";\n        \n            case 4:\n                return \"_4\";\n                \n            case 8:\n                return \"_8\";\n                \n            case 16:\n                return \"_16\";\n            \n            case 32:\n                return \"_32\";\n            \n            case 64:\n                return \"_64\";\n\n            case 128:\n                return \"_128\";\n\n            case 256:\n                return \"_256\";\n\n            case 512:\n                return \"_512\";\n\n            case 1024:\n                return \"_1024\";\n\n            case 2048:\n                return \"_2048\";\n                \n            default:\n                return \"_32\"\n        }\n    }\n\n    function checkForMoves(row, col) {\n        // Right\n        if (col < 3 && board[row][col] === board[row][col + 1]) {\n            return true;\n        }\n\n        // Left\n        if (col > 0 && board[row][col] === board[row][col - 1]) {\n            return true;\n        }\n\n        // Up\n        if (row > 0 && board[row][col] === board[row - 1][col]) {\n            return true;\n        }\n\n        // Down\n        if (row < 3 && board[row][col] === board[row + 1][col]) {\n            return true;\n        }\n    }\n\n    function checkForGameOver() {\n        let isFull = true;\n        let isMove = false;\n\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if(board[i][j] === 0) {\n                    isFull = false;\n                }\n\n                isMove = checkForMoves(i, j)\n            }\n        }\n\n        if (isFull && !isMove) {\n            const highScore = score;\n            setBoard(emptyMatrix);\n        }\n    }\n\n    function randomPosition() {\n        const row = Math.floor(Math.random() * 4);\n        const col = Math.floor(Math.random() * 4);\n\n        if(board[row][col] === 0) {\n            return [row, col]\n        }\n        \n        return randomPosition();\n    }\n\n    function startSquares() {\n        setScore(0);\n        let matrix = emptyMatrix;\n        \n        const pos1 = randomPosition();\n        let pos2;\n\n        do {\n            pos2 = randomPosition();\n        } while(pos1[0] === pos2[0] && pos1[1] === pos2[1])\n\n        matrix[pos1[0]][pos1[1]] = 2;\n        matrix[pos2[0]][pos2[1]] = 2;\n\n        setBoard(matrix);  \n    }\n\n    function randomSquare() {\n        let copy = [...board];\n        const newSquare = randomPosition();\n\n        copy[newSquare[0]][newSquare[1]] = 2;\n\n        setBoard(copy);\n    }\n\n    function afterSlide() {\n        if (generate) {\n            setTimeout(() => {\n                randomSquare();\n            }, 100)\n        }\n        \n        generate = false;\n        checkForGameOver();\n        setHasCombined(emptyMatrix);\n    }\n    \n    function slideAllRight() {\n        for (let i = 0; i < 4; i++) {\n            for(let j = 2; j >= 0; j--) {\n                if(board[i][j] > 0) {\n                    slideRight(i, j)\n                }\n            }\n        } \n      \n        afterSlide();\n    }\n\n    function slideRight(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n        \n        for(let i = col + 1; i < 4; i++) {\n            if(boardCopy[row][i] === 0) {\n                boardCopy[row][i] = board[row][i - 1];\n                boardCopy[row][i - 1] = 0;\n                generate = true;\n            }\n            else if(boardCopy[row][i] === boardCopy[row][i - 1] && !combinedCopy[row][i - 1]) {\n                boardCopy[row][i] = boardCopy[row][i] * 2;\n                setScore(score + boardCopy[row][i])\n                boardCopy[row][i - 1] = 0;\n                combinedCopy[row][i] = true;\n                generate = true;\n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n\n    function slideAllLeft() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 1; j < 4; j++) {\n                if(board[i][j] > 0) {\n                    slideLeft(i, j);\n                }\n            }\n        } \n        \n        afterSlide();\n    }\n\n    function slideLeft(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n\n        for(let i = col; i >= 0; i--) {\n            if(boardCopy[row][i - 1] === 0) {\n                boardCopy[row][i - 1] = board[row][i];\n                boardCopy[row][i] = 0;\n                generate = true;\n            }\n            else if(boardCopy[row][i - 1] === boardCopy[row][i] && !combinedCopy[row][i]) {\n                boardCopy[row][i - 1] = boardCopy[row][i] * 2;\n                setScore(score + boardCopy[row][i - 1])\n                boardCopy[row][i] = 0;\n                combinedCopy[row][i - 1] = true;\n                generate = true;\n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n\n    function slideAllUp() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 1; j < 4; j++) {\n                if(board[j][i] > 0) {\n                    slideUp(j, i);\n                }\n            }\n        } \n\n        afterSlide();\n    }\n\n    function slideUp(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n\n        for(let i = row; i > 0; i--) {\n            if(boardCopy[i - 1][col] === 0) {\n                boardCopy[i - 1][col] = board[i][col];\n                boardCopy[i][col] = 0;\n                generate = true;\n            }\n            else if(boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i][col]) {\n                boardCopy[i - 1][col] = boardCopy[i][col] * 2;\n                setScore(score + boardCopy[i - 1][col])\n                boardCopy[i][col] = 0;\n                combinedCopy[i - 1][col] = true;\n                generate = true;\n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n\n    function slideAllDown() {\n        for(let i = 0; i < 4; i++) {\n            for(let j = 2; j >= 0; j--) {\n                if(board[j][i] > 0) {\n                    slideDown(j, i);\n                }\n            }\n        } \n\n        afterSlide();\n    }\n\n    function slideDown(row, col) {\n        let boardCopy = [...board]\n        let combinedCopy = [...hasCombined]\n\n        for(let i = row + 1; i < 4; i++) {\n            if(boardCopy[i][col] === 0) {\n                boardCopy[i][col] = board[i - 1][col];\n                boardCopy[i - 1][col] = 0;\n                generate = true;\n            }\n            else if(boardCopy[i][col] === boardCopy[i - 1][col] && !combinedCopy[i - 1][col]) {\n                boardCopy[i][col] = boardCopy[i][col] * 2;\n                setScore(score + boardCopy[i][col])\n                boardCopy[i - 1][col] = 0;\n                combinedCopy[i][col] = true;\n                generate = true;\n            }\n        }\n        \n        setBoard(boardCopy);\n        setHasCombined(combinedCopy);\n    }\n\n    React.useEffect(() => {\n        window.addEventListener('keydown', (e) => {  \n          switch(e.key) {\n            case 'ArrowUp':\n              slideAllUp()       \n              break\n            case 'ArrowDown':\n              slideAllDown()        \n              break\n            case 'ArrowLeft':\n              slideAllLeft()\n              break\n            case 'ArrowRight':\n              slideAllRight()\n              console.log(e.key)\n              break\n            default:\n          }\n        })\n      }, [slideAllUp, slideAllDown, slideAllLeft, slideAllRight])\n \n    return (\n        <Container maxWidth=\"xs\">\n            <Button className=\"play-button\" variant=\"contained\" onClick={() => startSquares()}>Play</Button>\n            <Button className=\"right-button\" variant=\"contained\" onClick={() => slideAllRight()}>Slide Right</Button>\n            <Button className=\"left-button\" variant=\"contained\" onClick={() => slideAllLeft()}>Slide Left</Button>\n            <Button className=\"up-button\" variant=\"contained\" onClick={() => slideAllUp()}>Slide Up</Button>\n            <Button className=\"down-button\" variant=\"contained\" onClick={() => slideAllDown()}>Slide Down</Button>\n            <Link to={{\n                pathname: \"/submit-score\",\n                state: { score: score }\n                }}>\n                TEST\n                </Link>\n            <h1 className=\"score\">{score}</h1>\n            <div className=\"board\">\n                <Grid \n                    container\n                    spacing={1}\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    \n                >\n                    {board.map(row => \n                        row.map(value => \n                            <Grid container item xs={3} spacing={0} >\n                                <Square value={value} class={`square ${getColor(value)}`} />\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n            </div>\n            \n        </Container>\n    )\n    \n    \n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}